{"version":3,"sources":["api.ts","reducer/chat-reducer.ts","components/Header.tsx","components/Cards.tsx","App.tsx","serviceWorker.ts","bll/store.ts","index.tsx"],"names":["socketAPI","socket","createConnection","this","io","subscribe","initMessagesHandler","newMessageHandler","clientTypeHandler","joinUserHandler","on","sentName","name","emit","sentMessage","message","clientType","destroyConnection","disconnect","initialState","messages","userType","users","Header","style","AppBar","position","className","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Cards","useSelector","state","chat","user","useState","value","setValue","dispatch","useDispatch","classes","useStyles","Grid","item","xs","Paper","wrapper","Card","content","CardContent","map","m","i","key","Date","getTime","toString","messageBlock","gutterBottom","u","typeUser","FormControl","fullWidth","flexDirection","TextField","flexGrow","onChange","event","currentTarget","onKeyPress","Button","onClick","App","chatActive","setChatActive","setName","useEffect","type","messagesReceived","newMessageReceived","userTyping","addUser","root","Container","maxWidth","container","justify","label","required","e","size","trim","makeStyles","marginBottom","height","overflowY","padding","wordBreak","bottom","left","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","filter","id","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.74a5b73e.chunk.js","sourcesContent":["import io from 'socket.io-client'\r\n\r\nexport const socketAPI = {\r\n    socket: null as null | SocketIOClient.Socket,\r\n    createConnection() {\r\n        this.socket = io('https://chat-server-io.herokuapp.com')\r\n    },\r\n    subscribe(\r\n        initMessagesHandler: (messages: any) => void,\r\n        newMessageHandler: (message: any) => void,\r\n        clientTypeHandler: (user: any) => void,\r\n        joinUserHandler: (user: any) => void){\r\n        this.socket?.on('init-messages-published', initMessagesHandler)\r\n        this.socket?.on('new-message-sent', newMessageHandler)\r\n        this.socket?.on('user-typing', clientTypeHandler)\r\n        this.socket?.on('join-user', joinUserHandler)\r\n    },\r\n    sentName(name: string) {\r\n        this.socket?.emit('client-name-sent', name)\r\n    },\r\n    sentMessage(message: string) {\r\n        this.socket?.emit('client-message-sent', message)\r\n    },\r\n    clientType() {\r\n        this.socket?.emit('client-typed')\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect()\r\n        this.socket = null\r\n    }\r\n\r\n}\r\n","import {socketAPI} from '../api'\r\n\r\nconst initialState = {\r\n    messages: [] as Array<any>,\r\n    userType: []  as Array<any>,\r\n    users: [] as Array<string>\r\n}\r\nexport const chatReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case 'messages-received': {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'message-received': {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.message],\r\n                userType: state.userType.filter((u: any) => u.id !== action.message.user.id)\r\n            }\r\n        }\r\n        case 'user-typing': {\r\n            return {\r\n                ...state,\r\n                userType: [...state.userType.filter((u: any) => u.id !== action.user.id), action.user]\r\n            }\r\n        }\r\n        case 'add-user': {\r\n            return {\r\n                ...state,\r\n                users: action.user\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const messagesReceived = (messages: any) => ({type: 'messages-received', messages})\r\nexport const newMessageReceived = (message: any) => ({type: 'message-received', message})\r\nexport const userTyping = (user: any) => ({type: 'user-typing', user})\r\nexport const addUser = (user: any) => ({type: 'add-user', user})\r\nexport const createConnectionSocket = () => (dispatch: any) => {\r\n    socketAPI.createConnection()\r\n\r\n    socketAPI.subscribe((messages) => {\r\n        dispatch(messagesReceived(messages))\r\n    }, (message) => {\r\n        dispatch(newMessageReceived(message))\r\n    }, (user) => {\r\n        dispatch(userTyping(user))\r\n    },(user) => {\r\n        debugger\r\n        dispatch(addUser(user))\r\n    })\r\n}\r\n\r\nexport const sentName = (name: string) => (dispatch: any) => {\r\n    socketAPI.sentName(name)\r\n}\r\nexport const clientTyping = () => (dispatch: any) => {\r\n    socketAPI.clientType()\r\n}\r\nexport const sentMessage = (message: string) => (dispatch: any) => {\r\n    socketAPI.sentMessage(message)\r\n}\r\nexport const destroyConnectionSocket = () => (dispatch: any) => {\r\n    socketAPI.destroyConnection()\r\n\r\n}\r\n","import {AppBar, IconButton, Toolbar, Typography} from '@material-ui/core'\r\nimport PolymerOutlinedIcon from '@material-ui/icons/PolymerOutlined'\r\nimport React from 'react'\r\n\r\nexport const Header:React.FC<PropsType> = ({style}) => {\r\n    return (\r\n        <AppBar position='static' className={style}>\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <PolymerOutlinedIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" color=\"inherit\">\r\n                    socket.io\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\ntype PropsType = {\r\n    style: string\r\n\r\n}\r\n","import {Button, Card, CardContent, FormControl, Paper, TextField, Typography, Grid} from '@material-ui/core'\r\nimport React, {useState} from 'react'\r\nimport {useStyles} from '../App'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {clientTyping, sentMessage} from '../reducer/chat-reducer'\r\nimport {AppStateType} from '../bll/store'\r\n\r\nexport const Cards = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const user = useSelector((state: AppStateType) => state.chat.userType)\r\n    const [value, setValue] = useState('')\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const sendMessageHandler = () => {\r\n        dispatch(sentMessage(value))\r\n        setValue('')\r\n    }\r\n    const clientTypingHandler = () => {\r\n        dispatch(clientTyping())\r\n    }\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Paper className={classes.wrapper}>\r\n\r\n                <Card className={classes.content}>\r\n                    <CardContent>\r\n                        {messages.map((m: any, i: number) => <Typography\r\n                            key={new Date().getTime().toString() + i}\r\n                            className={classes.messageBlock}\r\n                            variant={'subtitle2'}\r\n                            gutterBottom><b>{m.user.name} </b>: {m.message}</Typography>\r\n                        )}\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                {user.map((u: any) => <Typography\r\n                    variant={'body2'}\r\n                    className={classes.typeUser}>{u.name} typing...</Typography>)}\r\n\r\n                <FormControl fullWidth style={{flexDirection: 'row'}}>\r\n                    <TextField variant={'filled'} style={{flexGrow: 1}}\r\n                               onChange={(event) => setValue(event.currentTarget.value)} value={value}\r\n                               onKeyPress={clientTypingHandler}/>\r\n                    <Button color={'primary'} onClick={sendMessageHandler}>send</Button>\r\n                </FormControl>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport {useDispatch} from 'react-redux'\nimport {createConnectionSocket, destroyConnectionSocket, sentName} from './reducer/chat-reducer'\nimport {Button, Container, FormControl, Grid, TextField} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/styles'\nimport {Cards, Header} from './components'\n\n\nfunction App() {\n    const [chatActive, setChatActive] = useState(false)\n    const [name, setName] = useState('')\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(createConnectionSocket())\n        return () => {\n            dispatch(destroyConnectionSocket())\n        }\n    }, [dispatch])\n\n    const setNameHandler = () => {\n        if (name.trim()) {\n            dispatch(sentName(name))\n            setChatActive(true)\n            setName('')\n        }\n    }\n    return (\n        <>\n            <Header style={classes.root}/>\n            <Container maxWidth={'md'}>\n                <Grid container justify='center'>\n                    {!chatActive ?\n                        <FormControl variant={'outlined'}>\n                            <TextField label='name' type='text' value={name} required\n                                       onChange={e => setName(e.currentTarget.value)}/>\n                            <Button size={'small'} variant={'contained'} color={'primary'}\n                                    onClick={setNameHandler}>sendName</Button>\n                        </FormControl> :\n                        <Cards/>}\n                </Grid>\n            </Container>\n\n        </>\n    )\n}\n\nexport default App\nexport const useStyles = makeStyles({\n    root: {\n        marginBottom: '40px'\n    },\n    wrapper: {\n        position: 'relative',\n    },\n    content: {\n        height: '50vh',\n        overflowY: 'auto',\n        marginBottom: '30px'\n    },\n    messageBlock: {\n        padding: '15px 5px',\n        wordBreak: 'break-all'\n    },\n    typeUser: {\n        position: 'absolute',\n        bottom: '12%',\n        left: '1%'\n    }\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {chatReducer} from '../reducer/chat-reducer'\r\n\r\nconst rootReducer = combineReducers({chat: chatReducer})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport {Provider} from 'react-redux'\nimport {store} from './bll/store'\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}