{"version":3,"sources":["api.ts","reducer/chat-reducer.ts","components/Header.tsx","components/Cards.tsx","App.tsx","serviceWorker.ts","bll/store.ts","index.tsx"],"names":["socketAPI","socket","createConnection","this","io","subscribe","initMessagesHandler","newMessageHandler","clientTypeHandler","on","sentName","name","emit","sentMessage","message","clientType","destroyConnection","disconnect","createConnectionSocket","createAsyncThunk","param","thunkAPI","messages","dispatch","messagesReceived","newMessageReceived","user","userTyping","destroyConnectionSocket","clientTyping","slice","createSlice","initialState","userType","reducers","state","action","payload","push","index","findIndex","u","id","splice","actions","chatReducer","reducer","Header","style","AppBar","position","className","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Cards","useSelector","chat","messagesAnchorRef","useRef","useState","value","setValue","useDispatch","classes","useStyles","useEffect","current","scrollIntoView","behavior","Grid","item","xs","Paper","wrapper","Card","content","CardContent","map","m","i","key","Date","getTime","toString","messageBlock","gutterBottom","ref","typeUser","FormControl","fullWidth","flexDirection","TextField","flexGrow","onChange","event","currentTarget","onKeyPress","Button","onClick","App","chatActive","setChatActive","setName","root","Container","maxWidth","container","justify","label","type","required","e","size","trim","makeStyles","marginBottom","height","overflowY","padding","wordBreak","bottom","left","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d88438ea.chunk.js","sourcesContent":["import io from 'socket.io-client'\r\n\r\nexport const socketAPI = {\r\n    socket: null as null | SocketIOClient.Socket,\r\n    createConnection() {\r\n        this.socket = io('https://chat-server-io.herokuapp.com')\r\n    },\r\n    subscribe(\r\n        initMessagesHandler: (messages: any) => void,\r\n        newMessageHandler: (message: any) => void,\r\n        clientTypeHandler: (user: any) => void) {\r\n        this.socket?.on('init-messages-published', initMessagesHandler)\r\n        this.socket?.on('new-message-sent', newMessageHandler)\r\n        this.socket?.on('user-typing', clientTypeHandler)\r\n\r\n    },\r\n    sentName(name: string) {\r\n        this.socket?.emit('client-name-sent', name)\r\n    },\r\n    sentMessage(message: string) {\r\n        this.socket?.emit('client-message-sent', message)\r\n    },\r\n    clientType() {\r\n        this.socket?.emit('client-typed')\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect()\r\n        this.socket = null\r\n    }\r\n\r\n}\r\n","import {socketAPI} from '../api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {Message, UserType} from '../utils-type/utils-type'\r\n\r\nexport const createConnectionSocket = createAsyncThunk('chat/create-socket', (param, thunkAPI) => {\r\n    socketAPI.createConnection()\r\n\r\n    socketAPI.subscribe((messages) => {\r\n        thunkAPI.dispatch(messagesReceived({messages}))\r\n    }, (message) => {\r\n        thunkAPI.dispatch(newMessageReceived({message}))\r\n    }, (user) => {\r\n        thunkAPI.dispatch(userTyping({user}))\r\n    })\r\n})\r\nexport const destroyConnectionSocket = createAsyncThunk('chat/destroy-socket', () => {\r\n    socketAPI.destroyConnection()\r\n})\r\nexport const sentName = createAsyncThunk('chat/sentName', (param: { name: string }) => {\r\n    socketAPI.sentName(param.name)\r\n})\r\nexport const clientTyping = createAsyncThunk('chat/clientTyping', () => socketAPI.clientType())\r\nexport const sentMessage = createAsyncThunk('chat/sentMessage', (param: { message: string }) => {\r\n    socketAPI.sentMessage(param.message)\r\n})\r\nconst initialState = {\r\n    messages: [] as Array<Message>,\r\n    userType: [] as Array<UserType>\r\n}\r\nconst slice = createSlice({\r\n    name: 'chat',\r\n    initialState,\r\n    reducers: {\r\n        messagesReceived: ((state, action) => {\r\n            state.messages = action.payload.messages\r\n        }),\r\n        newMessageReceived: ((state, action) => {\r\n            state.messages.push(action.payload.message)\r\n            const index = state.userType.findIndex((u) => u.id === action.payload.user.id)\r\n            if(index !== -1) {\r\n                state.userType.splice(index, 1)\r\n            }\r\n\r\n        }),\r\n        userTyping: ((state, action) => {\r\n            state.userType.push(action.payload.user)\r\n        })\r\n    }\r\n})\r\nexport const {messagesReceived, newMessageReceived, userTyping} = slice.actions\r\nexport const chatReducer = slice.reducer\r\n\r\n\r\n\r\n\r\n","import {AppBar, IconButton, Toolbar, Typography} from '@material-ui/core'\r\nimport PolymerOutlinedIcon from '@material-ui/icons/PolymerOutlined'\r\nimport React from 'react'\r\n\r\nexport const Header:React.FC<PropsType> = ({style}) => {\r\n    return (\r\n        <AppBar position='static' className={style}>\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <PolymerOutlinedIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" color=\"inherit\">\r\n                    socket.io\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\ntype PropsType = {\r\n    style: string\r\n\r\n}\r\n","import {Button, Card, CardContent, FormControl, Grid, Paper, TextField, Typography} from '@material-ui/core'\r\nimport React, {useEffect, useRef, useState} from 'react'\r\nimport {useStyles} from '../App'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {clientTyping, sentMessage} from '../reducer/chat-reducer'\r\nimport {AppStateType} from '../bll/store'\r\n\r\nexport const Cards = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const user = useSelector((state: AppStateType) => state.chat.userType)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [value, setValue] = useState('')\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const sendMessageHandler = () => {\r\n        dispatch(sentMessage({message: value}))\r\n        setValue('')\r\n    }\r\n    const clientTypingHandler = () => {\r\n        dispatch(clientTyping())\r\n    }\r\n\r\n    useEffect(() => {\r\n        messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }, [messages])\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Paper className={classes.wrapper}>\r\n\r\n                <Card className={classes.content}>\r\n                    <CardContent>\r\n                        {messages.map((m, i) => <Typography\r\n                            key={new Date().getTime().toString() + i}\r\n                            className={classes.messageBlock}\r\n                            variant={'subtitle2'}\r\n                            gutterBottom>\r\n                            <b>{m.user.name} </b>: {m.message}</Typography>\r\n                        )}\r\n                        <div ref={messagesAnchorRef}></div>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                {user.map((u) => <Typography\r\n                    variant={'body2'}\r\n                    className={classes.typeUser}>{u.name} typing...</Typography>)}\r\n\r\n                <FormControl fullWidth style={{flexDirection: 'row'}}>\r\n                    <TextField variant={'filled'} style={{flexGrow: 1}}\r\n                               onChange={(event) => setValue(event.currentTarget.value)} value={value}\r\n                               onKeyPress={clientTypingHandler}/>\r\n                    <Button color={'primary'} onClick={sendMessageHandler}>send</Button>\r\n                </FormControl>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport {useDispatch} from 'react-redux'\nimport {createConnectionSocket, destroyConnectionSocket, sentName} from './reducer/chat-reducer'\nimport {Button, Container, FormControl, Grid, TextField} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/styles'\nimport {Cards, Header} from './components'\n\n\nfunction App() {\n    const [chatActive, setChatActive] = useState(false)\n    const [name, setName] = useState('')\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(createConnectionSocket())\n        return () => {\n            dispatch(destroyConnectionSocket())\n        }\n    }, [dispatch])\n\n    const setNameHandler = () => {\n        if (name.trim()) {\n            dispatch(sentName({name}))\n            setChatActive(true)\n            setName('')\n        }\n    }\n    return (\n        <>\n            <Header style={classes.root}/>\n            <Container maxWidth={'md'}>\n                <Grid container justify='center'>\n                    {!chatActive ?\n                        <FormControl variant={'outlined'}>\n                            <TextField label='name' type='text' value={name} required\n                                       onChange={e => setName(e.currentTarget.value)}/>\n                            <Button size={'small'} variant={'contained'} color={'primary'}\n                                    onClick={setNameHandler}>sendName</Button>\n                        </FormControl> :\n                        <Cards/>}\n                </Grid>\n            </Container>\n\n        </>\n    )\n}\n\nexport default App\nexport const useStyles = makeStyles({\n    root: {\n        marginBottom: '40px'\n    },\n    wrapper: {\n        position: 'relative',\n    },\n    content: {\n        height: '50vh',\n        overflowY: 'auto',\n        marginBottom: '30px'\n    },\n    messageBlock: {\n        padding: '15px 5px',\n        wordBreak: 'break-all'\n    },\n    typeUser: {\n        position: 'absolute',\n        bottom: '12%',\n        left: '1%'\n    }\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {chatReducer} from '../reducer/chat-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nconst rootReducer = combineReducers({chat: chatReducer})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport {Provider} from 'react-redux'\nimport {store} from './bll/store'\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}